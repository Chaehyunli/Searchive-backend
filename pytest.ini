[pytest]
# Pytest Configuration File

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Output options
addopts =
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Show summary of all test outcomes
    -ra
    # Enable strict markers
    --strict-markers
    # Coverage options
    --cov=src
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    # Show warnings
    -W default
    # Fail on first error (comment out for full test run)
    # -x

# Custom markers
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (requires DB, Redis, etc.)
    e2e: End-to-end tests (full application flow)
    slow: Slow running tests
    skip_ci: Skip in CI environment

# Environment variables for testing
env =
    APP_ENV=test
    DEBUG=True

# Coverage configuration
[coverage:run]
source = src
omit =
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
